name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AZURE_CONTAINER_NAME: "raw-data"
  DEBUG: "True"
  DATABASE_URL: "sqlite:///app/database/data/verres.db"
  JWT_ALGORITHM: "HS256"
  JWT_ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  REDIS_URL: "redis://redis:6379/0"
  MODEL_URL: "http://model:5000"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  SCRAPER_INTERVAL: "86400"

jobs:
  format-and-lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
        
    - name: Format with black and isort
      run: |
        black .
        isort . --profile black
        
    - name: Run flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
    - name: Commit changes
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: "style: format code with black and isort"
        branch: ${{ github.head_ref }}

  test:
    needs: format-and-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov flake8 httpx
        pip install -r api/requirements.txt
        pip install -r model/requirements.txt
        pip install -e .
        
    - name: Run tests with pytest
      env:
        AZURE_CONNECTION_STRING: ${{ secrets.AZURE_CONNECTION_STRING }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      run: |
        pytest tests/

  build-and-push:
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: api/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-api
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          ADMIN_USERNAME=${{ secrets.ADMIN_USERNAME }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
        
    - name: Build and push Model image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: model/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}-model
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          AZURE_CONNECTION_STRING=${{ secrets.AZURE_CONNECTION_STRING }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to production
      env:
        AZURE_CONNECTION_STRING: ${{ secrets.AZURE_CONNECTION_STRING }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
        ADMIN_USERNAME: ${{ secrets.ADMIN_USERNAME }}
        ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
      run: |
        echo "Add deployment steps here"
        # Exemple de déploiement avec SSH :
        # - Connexion SSH au serveur
        # - Pull des nouvelles images
        # - Redémarrage des services
        # Nécessite la configuration des secrets pour les credentials 